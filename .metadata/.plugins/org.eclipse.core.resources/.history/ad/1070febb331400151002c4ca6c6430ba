package ch.rwi.hamcrest_vs_assertj;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasItem;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.notNullValue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;
import hamcrest_vs_assertj.Movie;

import java.util.List;

import org.assertj.core.data.Index;
import org.junit.Before;
import org.junit.Test;

/**
 *
 * 
 *
 * @author u211732 (Ren√© Winkler)
 * @version $Id: $
 * @since 0.0.1, 2015
 */
public class CustomMatcherExample {


    private Movie movie = new Movie();

    private static final String DIE_HARD = "A Good Day to Die Hard";
    private static final int RUNNING_TIME = 97;


    @Before
    public void setUp() {
        movie.setTitle(DIE_HARD);
        movie.setRunningTime(RUNNING_TIME);
    }

    @Test
    public void testList_JUnit() {
        assertEquals(DIE_HARD, movie.getTitle());
    }

    private int countOccurrences(List<String> listToSearch, String elementToSearch) {
        int occurences = 0;
        for (int i = 0; i < listToSearch.size(); i++) {
            if (listToSearch.get(i).equals(elementToSearch)) {
                occurences++;
            }
        }
        return occurences;
    }

    private boolean doesNotContainsDuplicates(List<String> listToSearch) {
        for (String elementToSearch : listToSearch) {
            if (countOccurrences(listToSearch, elementToSearch) > 1) {
                return false;
            }
        }
        return true;
    }


    @Test
    public void testList_Hamcrest() {
        assertThat(animals, is(notNullValue()));
        assertThat(animals, is(not(empty())));
        assertThat(animals, hasItem(LION));
        assertThat(doesNotContainsDuplicates(animals), equalTo(true));
        assertThat(animals.get(3), equalTo(NASHORN));
        assertThat(animals.size(), equalTo(5));
    }


    @Test
    public void testList_WithAssertJ() {
        assertThat(animals).isNotNull().isNotEmpty().contains(LION).doesNotHaveDuplicates().
                contains(NASHORN, Index.atIndex(3)).hasSize(5);
    }
}
